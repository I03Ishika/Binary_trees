/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// class Solution {
//     public boolean isSymmetric(TreeNode root) {
//         TreeNode root1 = root.left;
//         TreeNode root2 = root.right;
//         List<Integer> res1, res2 = new ArrayList<>();
//         res1 = preorder(root1);
//         res2 = preorder(root2);
//         for(int i=0; i<res1.size(); i++)
//         {
//             if(res1==null || res2 == null) return false;
//             while (res1.hasNext() && res2.hasNext()) {
//                 if (!res1.next().equals(res2.next())) {
//                     return false;
//                 }
// }


//         }
        

//     }
//     public List<Integer> preorder(TreeNode root)
//     {
//         List<Integer> result = new ArrayList<>();
//         if(root != null)
//         {
//             result.add(root.val);
//             result.addall(preorder(root.left));
//             result.addall(preorder(root.right));
//         }
//         return result;
//     }
// }

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) {
            return true;
        }
        return isMirror(root.left, root.right);
    }
    
    private boolean isMirror(TreeNode node1, TreeNode node2) {
        if (node1 == null && node2 == null) {
            return true;
        }
        if (node1 == null || node2 == null) {
            return false;
        }
        return node1.val == node2.val && isMirror(node1.left, node2.right) && isMirror(node1.right, node2.left);
    }
}
